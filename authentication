const jwt = require('jsonwebtoken');
const User = require('../models/User');
const asyncHandler = require('express-async-handler');

// Middleware to protect routes requiring authentication
const protect = asyncHandler(async (req, res, next) => {
  let token;

  // Check if authorization header exists and starts with 'Bearer'
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      // Extract token from the 'Bearer' part of the header
      token = req.headers.authorization.split(' ')[1];

      // Verify the token using the JWT_SECRET from environment variables
      const decoded = jwt.verify(token, process.env.JWT_SECRET);

      // Attach the user to the request object by fetching it from the database
      req.user = await User.findByPk(decoded.id, {
        attributes: { exclude: ['password'] },  // Exclude password for security
      });

      // Continue to the next middleware or route handler
      next();
    } catch (error) {
      // Token verification failed, respond with an error
      res.status(401);
      throw new Error('Not authorized, token failed');
    }
  }

  // If no token is provided in the request, return unauthorized
  if (!token) {
    res.status(401);
    throw new Error('Not authorized, no token');
  }
});

// Middleware to check if the user has an 'employer' role
const isEmployer = (req, res, next) => {
  // If the user has 'employer' role, proceed to the next middleware/handler
  if (req.user && req.user.role === 'employer') {
    next();
  } else {
    // If the user is not an employer, respond with an unauthorized error
    res.status(401);
    throw new Error('Not authorized as an employer');
  }
};

module.exports = { protect, isEmployer };
